Hiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii!!!!!!!!!!!!!!!
i am writing the following code 

#include <bits/stdc++.h>
using namespace std;

int binary_expo(int a, int b)
{
  int res = 1;
  while(b>0){ 
      if(b&1)
        res = res * a;
      a = a * a;
      b >>= 1;
    }
  return res;
}

int main()
{
  int a,b;
  cin>>a>>b;
  
  cout<<binary_expo(a,b);
}


me me writing this this


#include<stdio.h>
#include<string.h>

void main(){
    //taking max value 1000 for no of characters
	static char p[1000], q[1000], r[1000];
	

    /*taking string input using fgets() which enables us 
    to take spaces as input as well unlike using printf("%s",P);
    */
    printf("Enter the value of P : ");
    fgets(p, sizeof(p), stdin);
    printf("Enter the value of Q : ");
    fgets(q, sizeof(q), stdin);
    printf("Enter the value of R : ");
    fgets(r, sizeof(r), stdin);

	//initalising couters (ip, iq and ir respictively) for p,q and r for running loop 
	//sQ,sR is the size of Q and R
	int ip=0, iq=0, ir=0, index=0, sQ=strlen(q)-1, sR=strlen(r)-1;

	//the basic loop to run until P ends
	for( ; ip<(strlen(p))-1; ip++){
		//condition that test on Q until it exhaust, then turns to R
		if(iq<sQ){
			/*if a char matches then counter is inc. if before the end
			 of Q, any corresponding char doesnt match then counter is 
			 brought back to 0.
			 this ensure all the characters are checked*/
			if(q[iq]==p[ip])
				iq++;
			else
				iq=0;
				
			/*taking in account the starting index
			logic is, index keeps changing after every run ans check, 
			so the final index is final counter of p i.e size of p
			cuz p runes till end minus final index of q till it runs
			*/
			
			index=ip-iq+1;
		}
		else if(ir<sR){
			/*if a char matches then counter is inc. if before the end
			 of R, any corresponding char doesnt match then counter is 
			 brought back to 0.
			 this ensure all the characters are checked*/
			 
			if(r[ir]==p[ip])
				ir++;
			else
				ir=0;	
				
			/*taking in account the starting index if Q is empty
			i.e considering NULL value of Q then the value of index 
			will depend on R's value
			*/
			
			if(sQ==0)
				index=ip-ir+1;
				
		}
	}

	//if both Q and R are matched then printing index else the error message
	
	if((iq==sQ)&&(ir==sR))
		printf("\nThe pattern Q*R is found in P at index %d\n", index);
	else
		printf("\nThe pattern Q*R is not found in P\n");
		
}
